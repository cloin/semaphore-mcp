name: Test SemaphoreMCP

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -e .
          
      # Docker is pre-installed on GitHub Actions runners, so no installation needed
          
      - name: Start SemaphoreUI container
        run: |
          docker run -d \
            --name semaphore-dev \
            -p 3000:3000 \
            -e SEMAPHORE_DB_DIALECT=bolt \
            -e SEMAPHORE_ADMIN_PASSWORD=admin123 \
            -e SEMAPHORE_ADMIN_NAME=admin \
            -e SEMAPHORE_ADMIN_EMAIL=admin@localhost \
            -e SEMAPHORE_ADMIN=admin \
            -v semaphore-data:/etc/semaphore \
            semaphoreui/semaphore:latest
          
          # Give SemaphoreUI time to start up
          echo "Waiting for SemaphoreUI to start..."
          sleep 15
          
      - name: Generate API token
        id: generate-semaphore-token
        run: |
          set -e
          
          # Step 1: Login to Semaphore and get cookie
          echo "Logging in to get cookie..."
          curl -s -c /tmp/semaphore-cookie -X POST \
            -H 'Content-Type: application/json' \
            -H 'Accept: application/json' \
            -d '{"auth": "admin", "password": "admin123"}' \
            http://localhost:3000/api/auth/login
          
          # Step 2: Generate a new token
          echo "Generating new token..."
          curl -s -b /tmp/semaphore-cookie -X POST \
            -H 'Content-Type: application/json' \
            -H 'Accept: application/json' \
            http://localhost:3000/api/user/tokens
          
          # Step 3: Get the token value
          echo "Getting token list..."
          TOKEN_JSON=$(curl -s -b /tmp/semaphore-cookie \
            -H 'Content-Type: application/json' \
            -H 'Accept: application/json' \
            http://localhost:3000/api/user/tokens)
          
          # Extract token
          TOKEN=$(echo "$TOKEN_JSON" | jq -r '.[0].id')
          
          # Fallback if needed
          if [ -z "$TOKEN" ] || [ "$TOKEN" = "null" ]; then
            echo "Trying alternative method..."
            TOKEN=$(curl -s -X POST \
              -H 'Content-Type: application/json' \
              -d '{"auth": "admin", "password": "admin123"}' \
              http://localhost:3000/api/auth/login | jq -r '.token')
          fi
          
          # Output token for GitHub Actions
          echo "SEMAPHORE_API_TOKEN=$TOKEN" >> $GITHUB_ENV
          echo "token=$TOKEN" >> $GITHUB_OUTPUT
               
      - name: Run tests
        run: |
          # Make sure to use the token from the previous step
          export SEMAPHORE_API_TOKEN="${{ steps.generate-semaphore-token.outputs.token }}"
          
          # Debug token info
          echo "Token length: ${#SEMAPHORE_API_TOKEN}"
          echo "Token starts with: ${SEMAPHORE_API_TOKEN:0:8}..."
          
          # Verify we have a token before running tests
          if [ -z "$SEMAPHORE_API_TOKEN" ]; then
            echo "Error: No API token available - tests will fail"
            exit 1
          else
            echo "API token is available - running tests"
          fi
          
          # Create a .env file with the token for pytest
          echo "SEMAPHORE_URL=http://localhost:3000" > .env
          echo "SEMAPHORE_API_TOKEN=$SEMAPHORE_API_TOKEN" >> .env
          
          # Run tests with explicit env variables
          pytest tests/ -v
        env:
          SEMAPHORE_URL: http://localhost:3000
          # Use the token from previous step
          SEMAPHORE_API_TOKEN: ${{ steps.generate-semaphore-token.outputs.token }}
          
      - name: Cleanup
        if: always()
        run: |
          docker stop semaphore-dev || true
          docker rm semaphore-dev || true
