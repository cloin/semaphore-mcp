name: Test SemaphoreMCP

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    environment: test
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -e .
          
      # Docker is pre-installed on GitHub Actions runners, so no installation needed
          
      - name: Start SemaphoreUI container
        run: |
          docker run -d \
            --name semaphore-dev \
            -p 3000:3000 \
            -e SEMAPHORE_DB_DIALECT=bolt \
            -e SEMAPHORE_ADMIN_PASSWORD=admin123 \
            -e SEMAPHORE_ADMIN_NAME=admin \
            -e SEMAPHORE_ADMIN_EMAIL=admin@localhost \
            -e SEMAPHORE_ADMIN=admin \
            -v semaphore-data:/etc/semaphore \
            semaphoreui/semaphore:latest
          
          # Give SemaphoreUI time to start up
          echo "Waiting for SemaphoreUI to start..."
          sleep 15
          
      - name: Generate API token
        id: generate-semaphore-token
        run: |
          # Make the script executable
          chmod +x .github/workflows/generate-token.sh
          
          # Run the script to generate the token with secrets as arguments
          .github/workflows/generate-token.sh "$ADMIN_USERNAME" "$ADMIN_PASSWORD"
        env:
          ADMIN_USERNAME: ${{ secrets.ADMIN_USERNAME }}
          ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}
               
      - name: Run tests
        run: |
          # Make sure to use the token from the previous step
          export SEMAPHORE_API_TOKEN="${{ steps.generate-semaphore-token.outputs.token }}"
          
          # Debug token info
          echo "Token length: ${#SEMAPHORE_API_TOKEN}"
          echo "Token starts with: ${SEMAPHORE_API_TOKEN:0:20}..."
          
          # Verify we have a token before running tests
          if [ -z "$SEMAPHORE_API_TOKEN" ]; then
            echo "Error: No API token available - tests will fail"
            exit 1
          else
            echo "API token is available - running tests"
          fi
          
          # Create a .env file with the token for pytest
          echo "SEMAPHORE_URL=http://localhost:3000" > .env
          echo "SEMAPHORE_API_TOKEN=$SEMAPHORE_API_TOKEN" >> .env
          
          # Show .env file for debugging (without revealing full token)
          echo "Contents of .env file:"
          cat .env | sed 's/\(SEMAPHORE_API_TOKEN=\)\(.*\)/\1\2.../' 
          
          # Run tests with explicit env variables
          pytest tests/ -v
        env:
          SEMAPHORE_URL: http://localhost:3000
          # Use the token from previous step
          SEMAPHORE_API_TOKEN: ${{ steps.generate-semaphore-token.outputs.token }}
          
      - name: Cleanup
        if: always()
        run: |
          docker stop semaphore-dev || true
          docker rm semaphore-dev || true
