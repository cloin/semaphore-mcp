name: Test SemaphoreMCP

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -e .
          
      # Docker is pre-installed on GitHub Actions runners, so no installation needed
          
      - name: Start SemaphoreUI container
        run: |
          docker run -d \
            --name semaphore-dev \
            -p 3000:3000 \
            -e SEMAPHORE_DB_DIALECT=bolt \
            -e SEMAPHORE_ADMIN_PASSWORD=admin123 \
            -e SEMAPHORE_ADMIN_NAME=admin \
            -e SEMAPHORE_ADMIN_EMAIL=admin@localhost \
            -e SEMAPHORE_ADMIN=admin \
            -v semaphore-data:/etc/semaphore \
            semaphoreui/semaphore:latest
          
          # Give SemaphoreUI time to start up
          echo "Waiting for SemaphoreUI to start..."
          sleep 15
          
      - name: Generate API token
        id: generate-token
        run: |
          # Create a token using the username/password
          TOKEN=$(curl -s -X POST \
            -H "Content-Type: application/json" \
            -d '{"auth":"admin","password":"admin123"}' \
            http://localhost:3000/api/auth/login | jq -r '.token')
          
          # Verify token is not empty
          if [ -z "$TOKEN" ]; then
            echo "Error: Token generation failed or token is empty"
            exit 1
          fi
          
          echo "SEMAPHORE_API_TOKEN=$TOKEN" >> $GITHUB_ENV
          echo "token=$TOKEN" >> $GITHUB_OUTPUT
          echo "Token generated successfully: ${TOKEN:0:10}..."
      
      - name: Run tests
        run: |
          # Debug: Check if token is available
          if [ -z "$SEMAPHORE_API_TOKEN" ]; then
            echo "Warning: SEMAPHORE_API_TOKEN is not set in environment"
            # Use the output from previous step as fallback
            export SEMAPHORE_API_TOKEN="${{ steps.generate-token.outputs.token }}"
            echo "Using token from previous step output"
          fi
          
          # Verify we have a token before running tests
          if [ -z "$SEMAPHORE_API_TOKEN" ]; then
            echo "Error: No API token available - tests will fail"
            exit 1
          else
            echo "API token is available - running tests"
          fi
          
          pytest tests/ -v
        env:
          SEMAPHORE_URL: http://localhost:3000
          SEMAPHORE_API_TOKEN: ${{ steps.generate-token.outputs.token }}
          
      - name: Cleanup
        if: always()
        run: |
          docker stop semaphore-dev || true
          docker rm semaphore-dev || true
